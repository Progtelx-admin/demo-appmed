jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 89.58.46.66 >> ~/.ssh/known_hosts

      # Create Subdomain, Database, and User (unchanged)
      
      - name: Set up .env file (moved before Composer update)
        run: |
          ssh -o StrictHostKeyChecking=no appmed@89.58.46.66 << EOF
            cd /home/appmed/public_html/${{ github.event.inputs.subdomain }}.app-med.com/demo

            # Check if .env.example exists
            if [ ! -f .env.example ]; then
              echo ".env.example file not found!"
              exit 1
            fi

            # Create .env file
            cp .env.example .env

            # Add environment variables
            echo "APP_NAME=${{ secrets.APP_NAME }}" >> .env
            echo "APP_ENV=${{ secrets.APP_ENV }}" >> .env
            echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
            echo "APP_URL=https://${{ github.event.inputs.subdomain }}.app-med.com" >> .env
            echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "DB_DATABASE=appmed_${{ github.event.inputs.database_name }}" >> .env
            echo "DB_USERNAME=appmed_${{ github.event.inputs.db_user }}" >> .env
            echo "DB_PASSWORD=${{ github.event.inputs.db_password }}" >> .env
            echo "MAIL_MAILER=${{ secrets.MAIL_MAILER }}" >> .env
            echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env
            echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
            echo "MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION }}" >> .env
            echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> .env
            echo "PUSHER_APP_SECRET=${{ secrets.PUSHER_APP_SECRET }}" >> .env
            echo "PUSHER_APP_CLUSTER=${{ secrets.PUSHER_APP_CLUSTER }}" >> .env

            # Output the .env file contents (for debugging)
            cat .env
          EOF

      - name: Clear Laravel Config Cache (before Composer update)
        run: |
          ssh -o StrictHostKeyChecking=no appmed@89.58.46.66 << EOF
            cd /home/appmed/public_html/${{ github.event.inputs.subdomain }}.app-med.com/demo
            php artisan config:clear
            php artisan cache:clear
          EOF

      - name: Deploy Code to Subdomain
        run: |
          ssh -o StrictHostKeyChecking=no appmed@89.58.46.66 << 'EOF'
            set -e  # Exit on error

            echo "Creating the subdomain directory..."
            mkdir -p /home/appmed/public_html/${{ github.event.inputs.subdomain }}.app-med.com
            
            echo "Navigating to the subdomain folder..."
            cd /home/appmed/public_html/${{ github.event.inputs.subdomain }}.app-med.com || { echo "Directory not found"; exit 1; }

            # Check if the directory is a Git repository
            if [ ! -d ".git" ]; then
              echo "Cloning repository..."
              git clone https://github.com/Progtelx-admin/demo-appmed.git . || { echo "Git clone failed"; exit 1; }
            fi
            
            echo "Pulling the latest code from the repository..."
            git pull origin main || { echo "Git pull failed"; exit 1; }
            
            echo "Navigating to the demo directory..."
            cd demo || { echo "Demo directory not found"; exit 1; }

            echo "Installing/updating Composer dependencies..."
            composer update --no-interaction --prefer-dist --optimize-autoloader || { echo "Composer update failed"; exit 1; }
          EOF
